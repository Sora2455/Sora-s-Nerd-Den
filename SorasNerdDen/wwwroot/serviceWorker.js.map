{"version":3,"sources":["serviceWorker.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"serviceWorker.js","sourcesContent":["var log = console.log.bind(console);\nvar err = console.error.bind(console);\nonerror = err;\n// Moves the contents of one named cached into another.\nfunction cacheCopy(source, destination) {\n    \"use strict\";\n    return caches.delete(destination).then(function () {\n        return Promise.all([\n            caches.open(source),\n            caches.open(destination)\n        ]).then(function (results) {\n            var sourceCache = results[0];\n            var destCache = results[1];\n            return sourceCache.keys().then(function (requests) {\n                return Promise.all(requests.map(function (request) {\n                    return sourceCache.match(request).then(function (response) {\n                        return destCache.put(request, response);\n                    });\n                }));\n            });\n        });\n    });\n}\nfunction fetchAndCache(request, cache) {\n    \"use strict\";\n    return fetch(request.clone()).then(function (response) {\n        cache.put(request, response.clone());\n        return response;\n    });\n}\naddEventListener(\"install\", function (e) {\n    \"use strict\";\n    // Put updated resources in a new cache, so that currently running pages\n    // get the current versions.\n    e.waitUntil(caches.delete(\"core-waiting\").then(function () {\n        return caches.open(\"core-waiting\").then(function (core) {\n            var resourceUrls = [\n                \"/\",\n                // TODO /offline.html\n                \"/css/site.css\",\n                \"/css/font-awesome.css\",\n                \"/js/jquery.js\",\n                \"/js/bootstrap.js\",\n                \"/js/site.js\"\n            ];\n            return core.addAll(resourceUrls)\n                .then(function () { return self.skipWaiting(); });\n        });\n    }));\n});\naddEventListener(\"activate\", function (e) {\n    \"use strict\";\n    // Copy the newly installed cache to the active cache\n    e.waitUntil(cacheCopy(\"core-waiting\", \"core\")\n        .then(function () { return self.clients.claim(); })\n        .then(function () { return caches.delete(\"core-waiting\"); }));\n});\naddEventListener(\"fetch\", function (e) {\n    \"use strict\";\n    var request = e.request;\n    // If not a GET request, don't cache\n    if (request.method !== \"GET\") {\n        return fetch(request);\n    }\n    // TODO filter requests\n    // Basic read-through caching.\n    e.respondWith(caches.open(\"core\").then(function (core) {\n        return core.match(request).then(function (response) {\n            if (response) {\n                return response;\n            }\n            // we didn't have it in the cache, so add it to the cache and return it\n            log(\"runtime caching:\", request.url);\n            return fetchAndCache(request, core);\n        });\n    }));\n});\n"]}